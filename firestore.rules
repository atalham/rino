rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isParent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/parents/$(request.auth.uid)).data != null;
    }
    
    function isChild() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/childProfiles/$(request.auth.uid)).data != null;
    }

    function hasValidDeviceId(childId) {
      let childData = get(/databases/$(database)/documents/childProfiles/$(childId)).data;
      return childData != null && childData.deviceId == request.auth.uid;
    }

    function isChildOwner(childId) {
      return isAuthenticated() && (
        request.auth.uid == childId ||
        hasValidDeviceId(childId)
      );
    }

    function isAssignedToChild(childId) {
      return resource.data.assignedTo == childId;
    }

    // Parents collection
    match /parents/{parentId} {
      allow read: if isAuthenticated() && (request.auth.uid == parentId || isParent());
      allow create: if isAuthenticated() && request.auth.uid == parentId;
      allow update: if isAuthenticated() && request.auth.uid == parentId;
      allow delete: if isAuthenticated() && request.auth.uid == parentId;
    }

    // Child profiles collection
    match /childProfiles/{childId} {
      // Allow querying by pairing code
      allow list: if true && (
        request.query.limit <= 1 &&
        request.query.filters.size() == 1 &&
        request.query.filters[0].field == "pairingCode" &&
        request.query.filters[0].op == "==" &&
        request.query.filters[0].value != null &&
        request.query.filters[0].value != ""
      );
      
      // Allow querying by deviceId
      allow list: if true && (
        request.query.limit <= 1 &&
        request.query.filters.size() == 1 &&
        request.query.filters[0].field == "deviceId" &&
        request.query.filters[0].op == "=="
      );
      
      allow read: if true;
      allow create: if isParent() && 
        request.resource.data.parentId == request.auth.uid;
      allow update: if true && (
        // Allow parent to update their child's profile
        (isParent() && resource.data.parentId == request.auth.uid) ||
        // Allow updating deviceId and pairingCode
        (request.resource.data.deviceId != null && 
         request.resource.data.pairingCode == null &&
         resource.data.pairingCode != null)
      );
      allow delete: if isParent() && 
        resource.data.parentId == request.auth.uid;
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if true && (
        resource.data.parentId == request.auth.uid ||
        isAssignedToChild(request.auth.uid)
      );
      allow create: if isParent() && 
        request.resource.data.parentId == request.auth.uid;
      allow update: if true && (
        resource.data.parentId == request.auth.uid ||
        isAssignedToChild(request.auth.uid)
      );
      allow delete: if isParent() && 
        resource.data.parentId == request.auth.uid;
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if true && (
        resource.data.parentId == request.auth.uid ||
        isAssignedToChild(request.auth.uid)
      );
      allow create: if isParent() && 
        request.resource.data.parentId == request.auth.uid;
      allow update: if isParent() && 
        resource.data.parentId == request.auth.uid;
      allow delete: if isParent() && 
        resource.data.parentId == request.auth.uid;
    }
  }
} 